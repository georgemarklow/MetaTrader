#property indicator_chart_window
#property indicator_buffers 2
#property indicator_color1 Red
#property indicator_color2 Blue

double upArrow[];
double downArrow[];
string PatternText[5000];

int init() 
{
   SetIndexStyle(0, DRAW_ARROW, 0, 1);
   SetIndexArrow(0, 234);
   SetIndexBuffer(0, downArrow);      

   SetIndexStyle(1, DRAW_ARROW, 0, 1);
   SetIndexArrow(1, 233);
   SetIndexBuffer(1, upArrow);
      
   return(0);
}

int deinit() 
{
   ObjectsDeleteAll(0, OBJ_TEXT);
   return(0);
}

int start()
{
   double range, avgRange;
   int counter;
   static datetime prevtime = 0;
   int shift, shift1, shift2;
   string pattern, period;
   int setPattern = 0;
   double O, O1, C, C1, L, L1, H, H1;     

   if(prevtime == Time[0]) 
     return(0);
     
   prevtime = Time[0];   

   switch(Period()) 
     {
       case 1:     period = "M1";  break;
       case 5:     period = "M5";  break;
       case 15:    period = "M15"; break;
       case 30:    period = "M30"; break;      
       case 60:    period = "H1";  break;
       case 240:   period = "H4";  break;
       case 1440:  period = "D1";  break;
       case 10080: period = "W1";  break;
       case 43200: period = "MN";  break;
     }

   for(int j = 0; j < Bars; j++) 
      PatternText[j] = "pattern-" + j;

   for(shift = 0; shift < Bars; shift++) 
     {
       counter = shift;
       range = 0;
       avgRange = 0;
       for(counter = shift; counter <= shift + 9; counter++) 
       {
         avgRange = avgRange + MathAbs(High[counter] - Low[counter]);
       }
       range = avgRange / 10;
       shift1 = shift + 1;   
       shift2 = shift + 2;  
       O = Open[shift1];
       O1 = Open[shift2];
       H = High[shift1];
       H1 = High[shift2];
       L = Low[shift1];
       L1 = Low[shift2];
       C = Close[shift1];
       C1 = Close[shift2];      

       if((C1 > O1) && (O > C) && (O >= C1) && (O1 >= C) && ((O - C) > (C1 - O1))) 
       {
         DrawBearArrow(shift, shift1, range);
       }
       
       if((O1 > C1) && (C > O) && (C >= O1) && (C1 >= O) && ((C - O) > (O1 - C1))) 
       {
         DrawBullArrow(shift, shift1, range);
       }
     }
   return(0);
}

void DrawBullArrow(int shift, int shift1, double range)
{
   upArrow[shift1] = Low[shift1] - range*0.5;
}

void DrawBearArrow(int shift, int shift1, double range)
{
   downArrow[shift1] = High[shift1] + range*0.5;
}
